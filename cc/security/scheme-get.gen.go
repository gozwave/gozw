// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package security

import (
	"encoding/gob"
	"errors"
	"fmt"

	"github.com/gozwave/gozw/cc"
)

const CommandSchemeGet cc.CommandID = 0x04

func init() {
	gob.Register(SchemeGet{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x98),
		Command:      cc.CommandID(0x04),
		Version:      1,
	}, NewSchemeGet)
}

func NewSchemeGet() cc.Command {
	return &SchemeGet{}
}

// <no value>
type SchemeGet struct {
	SupportedSecuritySchemes byte
}

func (cmd SchemeGet) CommandClassID() cc.CommandClassID {
	return 0x98
}

func (cmd SchemeGet) CommandID() cc.CommandID {
	return CommandSchemeGet
}

func (cmd SchemeGet) CommandIDString() string {
	return "SECURITY_SCHEME_GET"
}

func (cmd *SchemeGet) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return fmt.Errorf("slice index out of bounds (.SupportedSecuritySchemes) %d<=%d", len(payload), i)
	}

	cmd.SupportedSecuritySchemes = payload[i]
	i++

	return nil
}

func (cmd *SchemeGet) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.SupportedSecuritySchemes)

	return
}
