// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package time

import (
	"encoding/binary"
	"encoding/gob"
	"errors"
	"fmt"

	"github.com/gozwave/gozw/cc"
)

const CommandDateReport cc.CommandID = 0x04

func init() {
	gob.Register(DateReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x8A),
		Command:      cc.CommandID(0x04),
		Version:      1,
	}, NewDateReport)
}

func NewDateReport() cc.Command {
	return &DateReport{}
}

// <no value>
type DateReport struct {
	Year uint16

	Month byte

	Day byte
}

func (cmd DateReport) CommandClassID() cc.CommandClassID {
	return 0x8A
}

func (cmd DateReport) CommandID() cc.CommandID {
	return CommandDateReport
}

func (cmd DateReport) CommandIDString() string {
	return "DATE_REPORT"
}

func (cmd *DateReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return fmt.Errorf("slice index out of bounds (.Year) %d<=%d", len(payload), i)
	}

	cmd.Year = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return fmt.Errorf("slice index out of bounds (.Month) %d<=%d", len(payload), i)
	}

	cmd.Month = payload[i]
	i++

	if len(payload) <= i {
		return fmt.Errorf("slice index out of bounds (.Day) %d<=%d", len(payload), i)
	}

	cmd.Day = payload[i]
	i++

	return nil
}

func (cmd *DateReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.Year)
		payload = append(payload, buf...)
	}

	payload = append(payload, cmd.Month)

	payload = append(payload, cmd.Day)

	return
}
