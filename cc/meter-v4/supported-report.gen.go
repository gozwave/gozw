// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package meterv4

import (
	"encoding/gob"
	"errors"
	"fmt"

	"github.com/gozwave/gozw/cc"
)

const CommandSupportedReport cc.CommandID = 0x04

func init() {
	gob.Register(SupportedReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x32),
		Command:      cc.CommandID(0x04),
		Version:      4,
	}, NewSupportedReport)
}

func NewSupportedReport() cc.Command {
	return &SupportedReport{}
}

// <no value>
type SupportedReport struct {
	Properties1 struct {
		MeterReset bool

		MeterType byte

		RateType byte
	}

	Properties2 struct {
		ScaleSupported0 byte

		Mst bool
	}

	NumberOfScaleSupportedBytesToFollow byte

	ScaleSupported []byte
}

func (cmd SupportedReport) CommandClassID() cc.CommandClassID {
	return 0x32
}

func (cmd SupportedReport) CommandID() cc.CommandID {
	return CommandSupportedReport
}

func (cmd SupportedReport) CommandIDString() string {
	return "METER_SUPPORTED_REPORT"
}

func (cmd *SupportedReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return fmt.Errorf("slice index out of bounds (.Properties1) %d<=%d", len(payload), i)
	}

	cmd.Properties1.MeterType = (payload[i] & 0x1F)

	cmd.Properties1.RateType = (payload[i] & 0x60) >> 5

	cmd.Properties1.MeterReset = payload[i]&0x80 == 0x80

	i += 1

	if len(payload) <= i {
		return fmt.Errorf("slice index out of bounds (.Properties2) %d<=%d", len(payload), i)
	}

	cmd.Properties2.ScaleSupported0 = (payload[i] & 0x7F)

	cmd.Properties2.Mst = payload[i]&0x80 == 0x80

	i += 1

	if len(payload) <= i {
		return fmt.Errorf("slice index out of bounds (.NumberOfScaleSupportedBytesToFollow) %d<=%d", len(payload), i)
	}

	cmd.NumberOfScaleSupportedBytesToFollow = payload[i]
	i++

	if len(payload) <= i {
		return fmt.Errorf("slice index out of bounds (.ScaleSupported) %d<=%d", len(payload), i)
	}

	{
		length := (payload[2+2] >> 0) & 0xFF
		cmd.ScaleSupported = payload[i : i+int(length)]
		i += int(length)
	}

	return nil
}

func (cmd *SupportedReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		val |= (cmd.Properties1.MeterType) & byte(0x1F)

		val |= (cmd.Properties1.RateType << byte(5)) & byte(0x60)

		if cmd.Properties1.MeterReset {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	{
		var val byte

		val |= (cmd.Properties2.ScaleSupported0) & byte(0x7F)

		if cmd.Properties2.Mst {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.NumberOfScaleSupportedBytesToFollow)

	if cmd.ScaleSupported != nil && len(cmd.ScaleSupported) > 0 {
		payload = append(payload, cmd.ScaleSupported...)
	}

	return
}
